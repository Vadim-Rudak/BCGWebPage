<!DOCTYPE html>
<html lang="en-us">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>SweetSugarMatch3</title>
        <style>
            html, body {
				background: #c7b39b url(Images/pattern.png);
				background-size: 8%;
                width: 100%;
                height: 100%;
                padding: 0px;
                margin: 0px;
            }
            .fullscreen {
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0px;
                left: 0px;
            }
			#canvas {
				background: #383838;
				position: absolute;
				width: 100%;
				height: 100%;
				
				display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
			}
			#canvasSpine {
				background: #383838;
				position: absolute;
				width: 100%;
				height: 100%;
				
				display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
			}
            #loading-overlay {
                font-size: 20px;
                z-index: 1;
                display: flex;
                flex-direction: column;
                justify-content: end;
                align-items: center;
            }
            #icon {
                max-width: 120px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            #progress-bar {
                border-radius: 5px;
                width: 90%;
                max-width: 250px;
                height: 20px;
                background: #242424;
                padding: 5px;
            }
            #progress-bar-fill {
                border-radius: 3px;
                width: 0%;
                height: 100%;
                background: #FF9A00;
            }
        </style>
    </head>
    <body>
        <canvas id="canvas" class="fullscreen"></canvas>
		<canvas id="canvasSpine" class="canvasSpineFullScreen">></canvas>									   
        <div id="loading-overlay" class="fullscreen">
            <div id="progress-bar"><div id="progress-bar-fill"></div></div>
        </div>
        <script src="./instant-games-bridge.js"></script>
		<script src="./dist/spine-webgl.js"></script>		

		<!-- Yandex.Metrika counter -->
		<script type="text/javascript" >
			(function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
			m[i].l=1*new Date();
			for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
			k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
			(window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

			ym(92125942, "init", {
				clickmap:true,
				trackLinks:true,
				accurateTrackBounce:true
		    });

			function WaitingForDownload(){
				ym(92125942,'reachGoal','WaitingForDownload')
			}
			
			function Victories(){
				ym(92125942,'reachGoal','Victories')
			}
			
			function Defeats(){
				ym(92125942,'reachGoal','Defeats')
			}
				
			function InterstitialAds(){
				ym(92125942,'reachGoal','InterstitialAds')
			}
				
			function RewardedAds(){
				ym(92125942,'reachGoal','RewardedAds')
			}
				
			function M1(){
				ym(92125942,'reachGoal','M1')
			}
				
			function M2(){
				ym(92125942,'reachGoal','M2')
			}
				
			function M3(){
				ym(92125942,'reachGoal','M3')
			}
				
			function M4(){
				ym(92125942,'reachGoal','M4')
			}
			
			function M5(){
				ym(92125942,'reachGoal','M5')
			}
			
			function M6(){
				ym(92125942,'reachGoal','M6')
			}
			
			function M7(){
				ym(92125942,'reachGoal','M7')
			}
			
			function M8(){
				ym(92125942,'reachGoal','M8')
			}
			
			function M9(){
				ym(92125942,'reachGoal','M9')
			}
			
			function M10(){
				ym(92125942,'reachGoal','M10')
			}

		</script>
		<noscript><div><img src="https://mc.yandex.ru/watch/92125942" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
		<!-- /Yandex.Metrika counter -->







		
        <script>
            if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
                let meta = document.createElement('meta')
                meta.name = 'viewport'
                meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes'
                document.getElementsByTagName('head')[0].appendChild(meta)
            }

            let canvas = document.getElementById('canvas')
            let loadingOverlay = document.getElementById('loading-overlay')
            let progressBarFill = document.getElementById('progress-bar-fill')
			var canvasSpine = document.getElementById("canvasSpine");

            const STORAGE_DATA_SEPARATOR = '{bridge_data_separator}'
            const STORAGE_KEYS_SEPARATOR = '{bridge_keys_separator}'
            const STORAGE_VALUES_SEPARATOR = '{bridge_values_separator}'
            
			canvas.width = canvas.clientWidth;
			canvas.height = canvas.clientHeight;
			var HeightUnity = ((canvas.clientHeight / 9) * 20).toFixed(0)
			
			if (canvas.width > HeightUnity)
			{
				canvas.style.width = HeightUnity + "px";
				canvasSpine.style.width = HeightUnity + "px";
				var canvasCenter = ((canvas.width - HeightUnity)/2).toFixed(0)
				canvas.style.left = canvasCenter + "px";
				canvasSpine.style.left = canvasCenter + "px";
			}
			var FILE = "Loading_screen";
			var ANIMATION = "load_screen";
			var SCALE = 0.9;

			var canvasSpine, context, gl, renderer, input, assetManager;
			var skeletons = [];
			var timeKeeper;
			//var label = document.getElementById("label");
			var updateMean = new spine.WindowedMean();
			var renderMean = new spine.WindowedMean();

			window.onresize = () => 
			{
				
					SCALE = (canvasSpine.height/1041.11).toFixed(2);
					
					
					canvas.width = canvas.clientWidth;
					canvas.height = canvas.clientHeight;
					var HeightUnity = ((canvas.clientHeight / 9) * 20).toFixed(0)
					//alert(""+canvas.width+"\n"+canvas.height);
					if (canvas.width > HeightUnity)
					{
						canvas.style.width = HeightUnity + "px";
						canvasSpine.style.width = HeightUnity + "px";
						var canvasCenter = ((canvas.width - HeightUnity)/2).toFixed(0)
						canvas.style.left = canvasCenter + "px";
						canvasSpine.style.left = canvasCenter + "px";
					}
			};
			function init() {
				//canvasSpine = document.getElementById("canvasSpine");
				
				canvasSpine.width = canvasSpine.clientWidth; 
				canvasSpine.height = canvasSpine.clientHeight;
				
				SCALE = (canvasSpine.height/1041.11).toFixed(2);
				
				//canvasSpine.width = '100%'; 
				//canvasSpine.height = '100%';
				
				context = new spine.ManagedWebGLRenderingContext(canvasSpine, { alpha: false });
				gl = context.gl;

				renderer = new spine.SceneRenderer(canvasSpine, context);
				assetManager = new spine.AssetManager(context, "./assets/");
				input = new spine.Input(canvasSpine);

				assetManager.loadTextureAtlas(FILE.replace("-pro", "").replace("-ess", "") + "-pma.atlas");
				assetManager.loadText(FILE + ".json");

				timeKeeper = new spine.TimeKeeper();
				requestAnimationFrame(load);
			}

			var run = true;

			function load() {
				timeKeeper.update();
				if (assetManager.isLoadingComplete()) {
					var atlas = assetManager.get(FILE.replace("-pro", "").replace("-ess", "") + "-pma.atlas");
					var atlasLoader = new spine.AtlasAttachmentLoader(atlas);
					var skeletonJson = new spine.SkeletonJson(atlasLoader);
					skeletonJson.scale = SCALE;
					var skeletonData = skeletonJson.readSkeletonData(JSON.parse(assetManager.get(FILE + ".json")));

					skeleton = new spine.Skeleton(skeletonData);
					var stateData = new spine.AnimationStateData(skeleton.data);
					state = new spine.AnimationState(stateData);
					stateData.defaultMix = 0;

					/*var originalSkin = skeleton.data.findSkin("goblingirl");
					var copy = new spine.Skin("test");
					copy.copySkin(originalSkin);
					skeleton.setSkin(copy);
					skeleton.setSlotsToSetupPose();*/

					state.setAnimation(0, ANIMATION, true);
					skeletons.push({ skeleton: skeleton, state: state });

					requestAnimationFrame(render);
				} else {
					requestAnimationFrame(load);
				}
			}

			function render() {
				var start = Date.now()
				timeKeeper.update();
				var delta = timeKeeper.delta;

				for (var i = 0; i < skeletons.length; i++) {
					var state = skeletons[i].state;
					var skeleton = skeletons[i].skeleton;
					state.update(delta);
					state.apply(skeleton);
					skeleton.updateWorldTransform();
				}
				updateMean.addValue(Date.now() - start);
				start = Date.now();

				gl.clearColor(0.2, 0.2, 0.2, 1);
				gl.clear(gl.COLOR_BUFFER_BIT);

				renderer.resize(spine.ResizeMode.Fit);
				renderer.begin();
				for (var i = 0; i < skeletons.length; i++) {
					var skeleton = skeletons[i].skeleton;
					renderer.drawSkeleton(skeleton, true);
				}
				renderer.end();

				requestAnimationFrame(render)
				renderMean.addValue(Date.now() - start);
				//label.innerHTML = ("Update time: " + Number(updateMean.getMean()).toFixed(2) + " ms\n" +
				//	"Render time: " + Number(renderMean.getMean()).toFixed(2) + " ms\n");
			}

			init();
            
            // utils
            window.unityInstance = null
            let progressBarFillingInterval = null

            function sendMessageToUnity(name, value) {
                if (window.unityInstance !== null) {
                    window.unityInstance.SendMessage('Bridge', name, value)
                }
            }

            function onUnityLoadingProgressChanged(progress) {
                if (progress === 0.9) {
                    completeProgressBarFilling()
                    return
                }

                progressBarFill.style.width = `${ progress * 100 }%`
                if (progress === 1 && progressBarFillingInterval !== null) {
                    clearInterval(progressBarFillingInterval)
                    progressBarFillingInterval = null
                }
            }
            
            function completeProgressBarFilling() {
                if (progressBarFillingInterval !== null) {
                    return
                }

                let currentPercent = 90
                progressBarFill.style.width = `${ currentPercent }%`
                progressBarFillingInterval = setInterval(() => {
                    currentPercent++
                    if (currentPercent > 100) {
                        currentPercent = 100
                    }

                    progressBarFill.style.width = `${ currentPercent + 1 }%`

                    if (currentPercent >= 100) {
                        clearInterval(progressBarFillingInterval)
                        progressBarFillingInterval = null
                        return
                    }
                }, 100)
            }
			
			
			
			
			function GetItem5(){ 
				vkBridge.send('VKWebAppShowOrderBox', 
				{ 
					type: 'item', 
					item: 'corgi_sale_item_5', 
				})
				.then( (data) => {
					console.log('Покупка состоялась.', data) 
					SendMessageToUnity5();
				}) 
				.catch( (e) => {console.log('Ошибка!', e) });
			}
					  
			function GetItem10(){ 
				vkBridge.send('VKWebAppShowOrderBox', 
				{ 
					type: 'item', 
					item: 'corgi_sale_item_10', 
				})
				.then( (data) => {
					console.log('Покупка состоялась.', data) 
					SendMessageToUnity10();
				}) 
				.catch( (e) => {console.log('Ошибка!', e) });
			}
					  
			function GetItem20(){ 
				vkBridge.send('VKWebAppShowOrderBox', 
				{ 
					type: 'item', 
					item: 'corgi_sale_item_20', 
				})
				.then( (data) => {
					console.log('Покупка состоялась.', data) 
					SendMessageToUnity20();
				}) 
				.catch( (e) => {console.log('Ошибка!', e) });
			}
					  
			function GetItem30(){ 
				vkBridge.send('VKWebAppShowOrderBox', 
				{ 
					type: 'item', 
					item: 'corgi_sale_item_30', 
				})
				.then( (data) => {
					console.log('Покупка состоялась.', data) 
					SendMessageToUnity30();
				}) 
				.catch( (e) => {console.log('Ошибка!', e) });
			}
					  
					  
			function GetItem50(){ 
				vkBridge.send('VKWebAppShowOrderBox', 
				{ 
					type: 'item', 
					item: 'corgi_sale_item_50', 
				})
				.then( (data) => {
					console.log('Покупка состоялась.', data) 
					SendMessageToUnity50();
				}) 
				.catch( (e) => {console.log('Ошибка!', e) });
			}
	  
	
	  
	  
	
	  
			function SendMessageToUnity5(){ 
				unityInstance.SendMessage('InitWorld', 'GetMoney5');
			}
			  
			function SendMessageToUnity10(){ 
				unityInstance.SendMessage('InitWorld', 'GetMoney10');
			}
			  
			function SendMessageToUnity20(){ 
				unityInstance.SendMessage('InitWorld', 'GetMoney20');
			}
			  
			function SendMessageToUnity30(){ 
				unityInstance.SendMessage('InitWorld', 'GetMoney30');
			}
			  
			function SendMessageToUnity50(){ 
				unityInstance.SendMessage('InitWorld', 'GetMoney50');
			}

            window.addEventListener('pointerdown', () => {
                window.focus()
                canvas.focus()
            })


            // initialization
            bridge
                .initialize()
                .then(() => {
                    bridge.advertisement.on('interstitial_state_changed', state => sendMessageToUnity('OnInterstitialStateChanged', state))
                    bridge.advertisement.on('rewarded_state_changed', state => sendMessageToUnity('OnRewardedStateChanged', state))
                    bridge.game.on('visibility_state_changed', state => sendMessageToUnity('OnVisibilityStateChanged', state))

                    let unityLoader = document.createElement('script')
                    unityLoader.src = 'Build/v0.21.loader.js'
                    unityLoader.onload = () => {
                        createUnityInstance(
                            canvas,
                            {
                                dataUrl: 'Build/v0.21.data',
                                frameworkUrl: 'Build/v0.21.framework.js',
                                codeUrl: 'Build/v0.21.wasm',
                                streamingAssetsUrl: 'StreamingAssets',
                                companyName: 'DefaultCompany',
                                productName: 'SweetSugarMatch3',
                                productVersion: '1.4',
                                // matchWebGLToCanvasSize: false, // Uncomment this to separately control WebGL canvas render size and DOM element size.
                                // devicePixelRatio: 1, // Uncomment this to override low DPI rendering on high DPI displays.
                            },
                            onUnityLoadingProgressChanged)
                            .then((unityInstance) => {
                                window.unityInstance = unityInstance
								canvasSpine.remove()
                                loadingOverlay.remove()
                                canvas.focus()
                            })
                            .catch((error) => {
                                console.error(error)
                            })
                    }
                    document.body.appendChild(unityLoader)
                })
                .catch(error => console.error(error))
            

            // platform
            window.getPlatformId = function() {
                return bridge.platform.id
            }

            window.getPlatformLanguage = function() {
                return bridge.platform.language
            }

            window.getPlatformPayload = function() {
                let payload = bridge.platform.payload
                if (typeof payload === 'string') {
                    return payload
                } else {
                    return ''
                }
            }


            // device
            window.getDeviceType = function() {
                return bridge.device.type
            }


            // player
            window.getIsPlayerAuthorizationSupported = function() {
                return bridge.player.isAuthorizationSupported.toString()
            }

            window.getIsPlayerAuthorized = function() {
                return bridge.player.isAuthorized.toString()
            }

            window.getPlayerId = function() {
                if (bridge.player.id) {
                    return bridge.player.id.toString()
                }

                return ''
            }

            window.getPlayerName = function() {
                if (bridge.player.name) {
                    return bridge.player.name.toString()
                }

                return ''
            }

            window.getPlayerPhotos = function() {
                if (bridge.player.photos.length > 0) {
                    return JSON.stringify(bridge.player.photos)
                }

                return ''
            }

            window.authorizePlayer = function(options) {
                bridge.player.authorize(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnAuthorizeCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnAuthorizeCompleted', 'false')
                    })
            }


            // game
            window.getVisibilityState = function() {
                return bridge.game.visibilityState
            }


            // storage
            window.getStorageDefaultType = function() {
                return bridge.storage.defaultType
            }

            window.getIsStorageSupported = function(storageType) {
                return bridge.storage.isSupported(storageType).toString()
            }

            window.getStorageData = function(key, storageType) {
                let keys = key.split(STORAGE_KEYS_SEPARATOR)

                bridge.storage.get(keys, storageType)
                    .then(data => {
                        if (keys.length > 1) {
                            let values = []

                            for (let i = 0; i < keys.length; i++) {
                                let value = data[i]
                                if (value) {
                                    if (typeof value !== 'string') {
                                        value = JSON.stringify(value)
                                    }

                                    values.push(value)
                                } else {
                                    values.push('')
                                }
                            }

                            sendMessageToUnity('OnGetStorageDataSuccess', `${key}${STORAGE_DATA_SEPARATOR}${values.join(STORAGE_VALUES_SEPARATOR)}`)
                        } else {
                            if (data[0]) {
                                if (typeof data[0] !== 'string') {
                                    data = JSON.stringify(data[0])
                                }
                            } else {
                                data = ''
                            }

                            sendMessageToUnity('OnGetStorageDataSuccess', `${key}${STORAGE_DATA_SEPARATOR}${data}`)
                        }
                    })
                    .catch(error => {
                        sendMessageToUnity('OnGetStorageDataFailed', key)
                    })
            }

            window.setStorageData = function(key, value, storageType) {
                let keys = key.split(STORAGE_KEYS_SEPARATOR)
                let values = value.split(STORAGE_VALUES_SEPARATOR)

                bridge.storage.set(keys, values, storageType)
                    .then(() => {
                        sendMessageToUnity('OnSetStorageDataSuccess', key)
                    })
                    .catch(error => {
                        sendMessageToUnity('OnSetStorageDataFailed', key)
                    })
            }

            window.deleteStorageData = function(key, storageType) {
                let keys = key.split(STORAGE_KEYS_SEPARATOR)

                bridge.storage.delete(keys, storageType)
                    .then(() => {
                        sendMessageToUnity('OnDeleteStorageDataSuccess', key)
                    })
                    .catch(error => {
                        sendMessageToUnity('OnDeleteStorageDataFailed', key)
                    })
            }


            // advertisement
            window.getIsBannerSupported = function() {
                return bridge.advertisement.isBannerSupported.toString()
            }

            window.getIsBannerShowing = function() {
                return bridge.advertisement.isBannerShowing.toString()
            }
            
            window.getMinimumDelayBetweenInterstitial = function() {
                return bridge.advertisement.minimumDelayBetweenInterstitial.toString()
            }

            window.setMinimumDelayBetweenInterstitial = function(options) {
                bridge.advertisement.setMinimumDelayBetweenInterstitial(JSON.parse(options))
            }

            window.showBanner = function(options) {
                bridge.advertisement.showBanner(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnShowBannerCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnShowBannerCompleted', 'false')
                    })
            }

            window.hideBanner = function() {
                bridge.advertisement.hideBanner()
                    .then(() => {
                        sendMessageToUnity('OnHideBannerCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnHideBannerCompleted', 'false')
                    })
            }

            window.showInterstitial = function(options) {
                bridge.advertisement.showInterstitial(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnShowInterstitialCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnShowInterstitialCompleted', 'false')
                    })
            }

            window.showRewarded = function() {
                bridge.advertisement.showRewarded()
                    .then(() => {
                        sendMessageToUnity('OnShowRewardedCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnShowRewardedCompleted', 'false')
                    })
            }


            // social
            window.getIsShareSupported = function() {
                return bridge.social.isShareSupported.toString()
            }

            window.getIsInviteFriendsSupported = function() {
                return bridge.social.isInviteFriendsSupported.toString()
            }

            window.getIsJoinCommunitySupported = function() {
                return bridge.social.isJoinCommunitySupported.toString()
            }

            window.getIsCreatePostSupported = function() {
                return bridge.social.isCreatePostSupported.toString()
            }

            window.getIsAddToHomeScreenSupported = function() {
                return bridge.social.isAddToHomeScreenSupported.toString()
            }

            window.getIsAddToFavoritesSupported = function() {
                return bridge.social.isAddToFavoritesSupported.toString()
            }

            window.getIsRateSupported = function() {
                return bridge.social.isRateSupported.toString()
            }

            window.share = function(options) {
                bridge.social.share(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnShareCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnShareCompleted', 'false')
                    })
            }

            window.inviteFriends = function() {
                bridge.social.inviteFriends()
                    .then(() => {
                        sendMessageToUnity('OnInviteFriendsCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnInviteFriendsCompleted', 'false')
                    })
            }

            window.joinCommunity = function(options) {
                bridge.social.joinCommunity(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnJoinCommunityCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnJoinCommunityCompleted', 'false')
                    })
            }

            window.createPost = function(options) {
                bridge.social.createPost(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnCreatePostCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnCreatePostCompleted', 'false')
                    })
            }

            window.addToHomeScreen = function() {
                bridge.social.addToHomeScreen()
                    .then(() => {
                        sendMessageToUnity('OnAddToHomeScreenCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnAddToHomeScreenCompleted', 'false')
                    })
            }

            window.addToFavorites = function() {
                bridge.social.addToFavorites()
                    .then(() => {
                        sendMessageToUnity('OnAddToFavoritesCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnAddToFavoritesCompleted', 'false')
                    })
            }

            window.rate = function() {
                bridge.social.rate()
                    .then(() => {
                        sendMessageToUnity('OnRateCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnRateCompleted', 'false')
                    })
            }


            // leaderboard
            window.getIsLeaderboardSupported = function() {
                return bridge.leaderboard.isSupported.toString()
            }

            window.getIsLeaderboardNativePopupSupported = function() {
                return bridge.leaderboard.isNativePopupSupported.toString()
            }

            window.getIsLeaderboardMultipleBoardsSupported = function() {
                return bridge.leaderboard.isMultipleBoardsSupported.toString()
            }

            window.getIsLeaderboardSetScoreSupported = function() {
                return bridge.leaderboard.isSetScoreSupported.toString()
            }

            window.getIsLeaderboardGetScoreSupported = function() {
                return bridge.leaderboard.isGetScoreSupported.toString()
            }

            window.getIsLeaderboardGetEntriesSupported = function() {
                return bridge.leaderboard.isGetEntriesSupported.toString()
            }

            window.leaderboardSetScore = function(options) {
                bridge.leaderboard.setScore(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnLeaderboardSetScoreCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnLeaderboardSetScoreCompleted', 'false')
                    })
            }

            window.leaderboardGetScore = function(options) {
                bridge.leaderboard.getScore(JSON.parse(options))
                    .then(data => {
                        if (data) {
                            if (typeof data !== 'string') {
                                data = JSON.stringify(data)
                            }

                            sendMessageToUnity('OnLeaderboardGetScoreCompleted', data)
                        } else {
                            sendMessageToUnity('OnLeaderboardGetScoreCompleted', '')
                        }
                    })
                    .catch(error => {
                        sendMessageToUnity('OnLeaderboardGetScoreCompleted', 'false')
                    })
            }

            window.leaderboardGetEntries = function(options) {
                bridge.leaderboard.getEntries(JSON.parse(options))
                    .then(data => {
                        if (data) {
                            if (typeof data !== 'string') {
                                data = JSON.stringify(data)
                            }

                            sendMessageToUnity('OnLeaderboardGetEntriesCompletedSuccess', data)
                        } else {
                            sendMessageToUnity('OnLeaderboardGetEntriesCompletedSuccess', '')
                        }
                    })
                    .catch(error => {
                        sendMessageToUnity('OnLeaderboardGetEntriesCompletedFailed', 'false')
                    })
            }

            window.leaderboardShowNativePopup = function(options) {
                bridge.leaderboard.showNativePopup(JSON.parse(options))
                    .then(() => {
                        sendMessageToUnity('OnLeaderboardShowNativePopupCompleted', 'true')
                    })
                    .catch(error => {
                        sendMessageToUnity('OnLeaderboardShowNativePopupCompleted', 'false')
                    })
            }
        </script>
    </body>
</html>
